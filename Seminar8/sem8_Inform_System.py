# Конкретное ФИО - ключ внешнего словаря
# Дальше ключи  вложенного словаря-значения

# пока возраст сделала как текст - подумать потом как лучше для последующей выборки, 
# на каком этапе переводить в число
staff = {
    "Иванов П.С.": {
        "ТН": "001",
        "Дата рождения": "17.10.1980", 
        "Адрес":"ул. Ленина, 43",
        "Пол":"М",
        "Возраст": '42',
        "Телефон":"+876390444",
        "Должность": "Директор",
        "Оклад": 150000,
        "Отдел": "Администрация",
        "Стаж": 22,
        "email": "ips1980@gmail.com",
        "Дата приема": '14.02.2005'
    },
    "Сергеева З.Л.": {
        "ТН": "002",
        "Дата рождения": "27.11.1983", 
        "Адрес":"ул. Попова, 15",
        "Пол":"Ж",
        "Возраст": '39',
        "Телефон":"+79121451402",
        "Должность": "Главный бухгалтер",
        "Оклад": 100000,
        "Отдел": "Бухгалтерия",
        "Стаж": 18,
        "email": "sergeeva@gmail.com",
        "Дата приема": '14.12.2010'
    },
    "Григорьева Е.С.": {
        "ТН": "003",
        "Дата рождения": "27.07.1982", 
        "Адрес":"ул. Просторная, 15-75",
        "Пол":"Ж",
        "Возраст": '40',
        "Телефон":"+79435558888",
        "Должность": "Коммерческий директор",
        "Оклад": 110000,
        "Отдел": "Администрация",
        "Стаж": 20,
        "email": "es_grig@gmail.com",
        "Дата приема": '25.02.2015'
    },
    "Тимофеев А.П.": {
        "ТН": "004",
        "Дата рождения": "21.05.1980", 
        "Адрес":"ул. Пушкинская, 22-48",
        "Пол":"М",
        "Возраст": '42',
        "Телефон":"+79254445566",
        "Должность": "Зав.производством",
        "Оклад": 120000,
        "Отдел": "Администрация",
        "Стаж": 22,
        "email": "timofeev@gmail.com",
        "Дата приема": '14.04.2007'
    }
}
# при добавлении сотрудника нужно запрашивать все значения по порядку вложенных ключей,
# давать возможность пропустить заполнение, тогда его просто не будет или пустое
# чтоб можно было дозаполнить позже/ или автоматически заполнять пропуски "-"

# подумать, кто может добавить поле в карточку сотрудника - речь про ключ, а не про значение
# вести проверку на ввод ключа - при несовпадении не давать, кроме какой-то роли, например

# печатает просто список сотрудников
def print_list_worker(staff):
    print('Сотрудники:\n ')
    for k in staff:
        print(f'{k}')

# печатает список сотров с полными данными - всю базу
def print_all_data(staff):
    for k,v in staff.items():
        print(f'\nФИО сотрудника: {k}')
        for m,n in v.items():
            print(f'\t{m}: {n}')

# печатает все данные по найденному сотруднику
def print_all_for_worker(dict,key):
    if key in dict:
        print(f'\nФИО сотрудника: {key}')
        for m,n in dict[key].items():
            print(f'\t{m}: {n}')
    else: print('Такой сотрудник не найден')  

#печатаем возможные для выборки поля у сотрудника - для информирования перед выбором
def print_fields_for_choice():
    print('''
    Возможные поля для выборки:
        "Дата рождения"     "Должность"       
        "Адрес"             "Оклад"    
        "Пол"               "Отдел"          
        "Возраст"           "Стаж"
        "Телефон"           "email"
        "Дата приема"
    ''')

#по отделу, по должности, по полу и .тд.,т.е. по конкретному значению вложенного ключа
# сейчас печатает только ФИО и само значение - можно добавить флаг
# 1 - печатать только ФИО по выбранному параметру
# 2- печатать все данные по тем сотр-м, кот.соответствуют условию отбора
# без передачи параметров сделать флаг в ф-ции по умолчанию - только ФИО ТН, например
def print_for_key_value(dict, key, item):
    print('\nДанные по запросу - ', key, "=" ,item,":")
    count_find = 0
    for k in dict:
        if key in dict[k]: #если искомый ключ есть во вложенном словаре сотрудника
            if dict[k][key] == item: #если значение этого ключа совпадает с искомым
                print(f'ФИО: {k} \tТН: {dict[k]["ТН"]}')
                count_find+=1
                # доработать, если ключ сложный, типа ДР или Дата Приема или диапазон, тогда
                # добавить парсинг строки и/или сравнение значений
        # else:
        #      #фиксируем ошибку ввода для поиска полей
        # эта проверка должна идти на уровне ввода, так правильнее и иначе будет повторение вывода
        #     print('Некорректное поле для поиска') 
    if count_find == 0: 
        #фиксируем лог и
        print('По заданным параметрам ничего не найдено') 


# просто список со значениями конкретного ключа у всех - без выбора значения
def list_items_for_key(dict, key):
    print('\nДанные по запросу - ', key, ":")
    for k in dict:
        if key in dict[k]: #если искомый ключ есть во вложенном словаре сотрудника
            print(f'ТН: {dict[k]["ТН"]} \tФИО: {k} \t{key}: {dict[k][key]}')



print_all_data(staff)
print_list_worker(staff)
# выводим все по сотруднику
sotr = input('Выберите сотрудника, введите ФИО из списка:')     
print_all_for_worker(staff, sotr)     

#по отделу, по должности, по полу и .тд.,т.е. по значению конкретного вложенного ключа
# сначала показываем все поля для выбора
print_fields_for_choice()
# после выбора поля на уровне интерфейса проверить корректность ввода, если это будет не строго ограниченный
# выбор через GUI - есть ли вообще такое поле, а уже потом запрашивать значение
section = input('Выберите/Введите поле для поиска: ') #если через GUI - дать возможность выбора 
# после выбора поля логично по некоторым ключам показать их возможные значения для праивльного выбора,
# т.е. к примеру, если section - Пол, дальше даем выбор конкретно между М и Ж и т.д.
# а некоторые эл-ты вводятся, такие как цифры и даты
el = input('Введите интересующее вас значение: ')
print_for_key_value(staff, section, el)

# просто список с разными значениями конкретного ключа у всех - без выбора значения
#  - сделать
print_fields_for_choice()
key = input('Введите интересующее вас поле для выборки значений: ')    
list_items_for_key(staff,key)
