# 34. Даны два файла, в каждом из которых находится запись многочлена. 
# Задача - сформировать файл, содержащий сумму многочленов.

# '''логика такая - найти макс. степень в двух строках многочлена
# затем составить словарь от макс. вниз, где ключ - степень, значение - коэф.при нем,
# если степени нет, значит коэф. принимаем равным 0, при арифм.операциях нам это неважно.
# Заполняем два списка, складываем последовательно коэф. и переносим это все в новый многочлен

# 36. Дан список чисел. Создайте список, в который попадают числа, описываемые максимальную возрастающую последовательность. Порядок элементов менять нельзя.

# *Пример:*

# [1, 5, 2, 3, 4, 6, 1, 7] => [1, 7]
# здесь нужно находить сплошную последовательность, числа могут идти не порядку,но если какого-то нет - она прерывается
# и вывести значение первого и последнего
# ?! можно сначала найти мин. в списке, а потом проверять последовательно есть ли кажд.след.значение,
# когда обрыв - значит Стоп, вот и граница. Но последовательность n+1 не обязательно начинается с минимума.
# ?!Но последовательность может начинаться не с минимума. Тогда может написать ф-цию, которая производит этот алгоритм
# поиска, а потом этой функцией перебрать каждый элемент списка, где эл-тов >, тот и победил))
# можно проверять в цикле через map, каждый итератор длиннее предыдущего записывать в переменную, по окончании цикла вывести
# рез-т из этой переменной ф-цией поиска этих значений

# длина списка - это теоретически сам.макс.возможная последовательность, если числа не повторяются и не прыгают
# вот надо найти эту последов-ть для каждого элемента, у кого больше - вывести рез-т



# 38. Напишите программу, удаляющую из текста все слова, содержащие "абв".
# [1, 5, 2, 3, 4, 1, 7] => [1, 5]
# '''