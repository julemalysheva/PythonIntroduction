# все этапы взаимодействия с пользователем, ввод,вывод, ошибки будут здесь же фиксироваться в логе
# сам алгоритм записи в файл с использованием даты/времени прописываем в модуле logger, 
# а применяем/вызываем ф-цию здесь в нужный момент для фиксации данных в файле,

# запуск ф-ции вывода лога на экран при желании пользователя делаем в main,
# а саму логику вывода файла на экран нужно прописать здесь - ниже обозначила ф-цию
import logger as log

# функция выбора пункта меню - что хочет пользователь, внутри может использовать вспомогательные функции
# Варианты:
#  1 - воспользоваться калькулятором; 2 - посмотреть лог; 3 - выход
# return (выбранный пункт меню), в зависимости от него мы строим main и обратку пользователю
# если get_variant() = 1 и строка рац.-запускаем одну функцию,если комплекс.-др.;если 2 - возвращаем логгер, если 3 - break
# это название будет использовано в main
def get_variant():
    # выдать пользователю список вариантов меню и запросить выбор
    menu = int(input('Введите пункт меню из предложенных: '))
    log.menu_logger(menu) #записали в лог
    # ограничиваем ввод пунктами меню 1-2-3, если нет, возвращаем на ввод снова
    # по ходу проверки ввода, если что-то пошло не так, записываем ошибку через вызов ф-ции:
    # log.error_logger(передаем сюда ошибку)
    return menu

# функция запроса строки выражения, внутри может использовать вспомогательные функции исключения ошибок
# запускается, если в ф-ции ниже выбран пункт 1
# return кортеж (тип выражения:рац.или комплекс., строка данных),в зависимости от типа в main вызываются модули
# в строке допустима точка (.) - т.к. считаем рациональные числа
# это название будет использовано в main
def get_value():
    data = input('value = ')
    # здесь присвоила значение просто для примера, оно должно получится при обработке строки
    if "j" in data: #в Пайтон вместо i в компл.числах использ.j - пока прописала так для проверки eval,но будем писать свою
        type_str = 'c'
    else:    
        type_str = 'r' #при запросе строки понять, если содержит i - значит возвращаем 'c',иначе 'r'
    data_input = (type_str,data)   
    log.input_logger(data) #в лог можно записать саму строку, без ее типа

    # по ходу проверки ввода, если что-то пошло не так, записываем ошибку через ф-цию
    # log.error_logger(передаем сюда ошибку)
    return data_input #вернули кортеж

# функция вывода данных, внутри может использовать вспомогательные функции
# в качестве данных будет либо результат вычислений, либо лог, в зависимости от выбранного пункта меню
# что вычисляем и что показываем - будет пропсиано в controller или в main, здесь просто прописать логику вывода.
# это название будет использовано в main
def view_data(data, title):
    print(f'{title} = {data}')
    log.res_logger(data)#показали рез-т и записали в лог

# эту ф-цию запускаем в main или ниже (и передаем туда файл) при выборе пункта 2.
# саму логику вывода прописать здесь - построчно считывать из файла
# подумать, можно ли организовать вывод в промежутке даты/времени
# может лучше использовать для этого json и какую-то структуру данных
# но для начала простой вывод построчно текстового файла

def view_logger(file):
    # описать вывод строк из файла и
    print('Показываем лог')
    log.view_log_logger('инфа о том, что выдан файл лога')#записали это в лог,что выдали файл к просмотру


# в процессе решить, возможно, нужно будет что-то объединить и пр.
# смысл в том, что мне в main нужно понимать выбор пользователя, саму строку и тип выражения:рац.или комплекс.